# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Ticker {
  id: ID!

  """ティッカーシンボル"""
  ticker: String!

  """取得価格"""
  getPrice: Float!

  """保有株数"""
  quantity: Int!

  """配当"""
  dividend: Float!

  """配当付与回数"""
  dividendTime: Int!

  """初回配当付与月"""
  dividendFirstTime: Int!

  """セクター"""
  sector: String!

  """購入時為替"""
  usdjpy: Float!

  """現在価格"""
  currentPrice: Float!

  """変化額"""
  priceGets: Float!

  """変化率"""
  currentRate: Float!
}

type User {
  id: ID!

  """@Validator.@IsEmail()"""
  email: String!
  name: String!
}

type LoginResponse {
  accessToken: String!
  refreshToken: String!
  user: User!
}

type Query {
  user(where: UserWhereInput, orderBy: [UserOrderByWithRelationInput!], cursor: UserWhereUniqueInput, take: Int, skip: Int, distinct: [UserScalarFieldEnum!]): User!
  getTickers(email: String!): [Ticker!]
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IntFilter
  email: StringFilter
  name: StringFilter
  password: StringFilter
}

input IntFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: NestedIntFilter
}

input NestedIntFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: NestedIntFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringFilter
}

enum QueryMode {
  default
  insensitive
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input UserOrderByWithRelationInput {
  id: SortOrder
  email: SortOrder
  name: SortOrder
  password: SortOrder
}

enum SortOrder {
  asc
  desc
}

input UserWhereUniqueInput {
  id: Int
  email: String
}

enum UserScalarFieldEnum {
  id
  email
  name
  password
  hashedRefreshToken
  createdAt
  updatedAt
}

type Mutation {
  login(loginUserInput: LoginUserInput!): LoginResponse!
  refreshToken: LoginResponse!
  logout: Boolean!
  createUser(data: UserCreateInput!): User!
  createTicker(input: CreateTickerInput!): Ticker!
  updateTicker(input: UpdateTickerInput!): Ticker!
  deleteTicker(input: UpdateTickerInput!): Ticker!
}

input LoginUserInput {
  email: String!
  password: String!
}

input UserCreateInput {
  email: String!
  name: String!
  password: String!
}

input CreateTickerInput {
  """ティッカーシンボル"""
  ticker: String!

  """取得価格"""
  getPrice: Float!

  """保有株数"""
  quantity: Int!

  """メールアドレス"""
  email: String!

  """配当"""
  dividend: Float!

  """配当付与回数"""
  dividendTime: Int!

  """初回配当付与月"""
  dividendFirstTime: Int!

  """セクター"""
  sector: String!

  """購入時為替"""
  usdjpy: Float!

  """現在価格"""
  currentPrice: Float!

  """変化額"""
  priceGets: Float!

  """変化率"""
  currentRate: Float!
}

input UpdateTickerInput {
  id: Int!

  """取得価格"""
  getPrice: Float!

  """保有株数"""
  quantity: Int!

  """配当"""
  dividend: Float!

  """購入時為替"""
  usdjpy: Float!

  """現在価格"""
  currentPrice: Float!

  """変化額"""
  priceGets: Float!

  """変化率"""
  currentRate: Float!
}
